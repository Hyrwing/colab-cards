{"version":3,"sources":["components/Card/styles.js","components/Card/index.tsx","components/Arrow/index.tsx","model/cards.ts","Views/MainView/styles.js","Views/MainView/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Title","styled","h1","Subtitle","Card","model","title","number","icon","size","subtitle","Arrow","direction","onClick","Button","variant","faArrowUp","faArrowDown","faArrowRight","faArrowLeft","getIcon","Cards","faDeaf","faDragon","faThumbsUp","faThumbsDown","faVolumeMute","faLightbulb","faHandPointRight","faHandPointUp","faEllipsisH","faQuestion","Container","bootstrap","Row","Col","MainView","useState","current","setCurrent","card","max","length","fluid","class","next","xs","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ihBAEO,IAAMA,EAAQC,IAAOC,GAAV,KAMLC,EAAWF,IAAOC,GAAV,KCYNE,EAd4B,SAACC,GAC1C,OACE,6BACE,kBAACL,EAAD,KAAQK,EAAMC,OACd,kBAACN,EAAD,KAAQK,EAAME,QACd,kBAAC,IAAD,CAAiBC,KAAMH,EAAMG,KAAMC,KAAK,OACxC,6BAJF,OAME,6BACA,kBAACN,EAAD,KAAWE,EAAMK,Y,eCkBRC,EAlB8B,SAAC,GAAkC,IAAD,IAA/BC,iBAA+B,MAAnB,KAAmB,EAAbC,EAAa,EAAbA,QAWhE,OACE,kBAACC,EAAA,EAAD,CAAQC,QAAQ,OAAOF,QAASA,GAC9B,kBAAC,IAAD,CAAiBL,KAZL,WACd,OAAQI,GACN,IARK,KAQI,OAAOI,IAChB,IARO,OAQI,OAAOC,IAClB,IARQ,QAQI,OAAOC,IACnB,IARO,OAQI,OAAOC,IAClB,QAAS,OAAOH,KAMOI,GAAWX,KAAK,SClBhCY,EAAqB,CAC9B,CACIf,MAAM,iBACNI,SAAU,GACVF,KAAMc,KAEV,CACIhB,MAAO,QACPI,SAAS,0BACTF,KAAMe,KAEV,CACIjB,MAAO,OACPI,SAAU,GACVF,KAAMgB,KAEV,CACIlB,MAAO,MACPI,SAAU,GACVF,KAAMiB,KAEV,CACInB,MAAM,iBACNI,SAAU,GACVF,KAAMkB,KAEV,CACIpB,MAAO,cACPI,SAAU,GACVF,KAAMmB,KAEV,CACIrB,MAAO,OACPI,SAAU,GACVF,KAAMoB,KAEV,CACItB,MAAO,cACPI,SAAU,GACVF,KAAMqB,KAEV,CACIrB,KAAMsB,IACNvB,OAAQ,GAEZ,CACIC,KAAMsB,IACNvB,OAAQ,GAEZ,CACIC,KAAMsB,IACNvB,OAAQ,GAEZ,CACIC,KAAMsB,IACNvB,OAAQ,GAEZ,CACIC,KAAMsB,IACNvB,OAAQ,GAEZ,CACIC,KAAMuB,M,2ZCrEP,IAAMC,EAAY/B,YAAOgC,IAAPhC,CAAH,KASTiC,EAAMjC,YAAOgC,IAAPhC,CAAH,KAIHkC,EAAMlC,YAAOgC,IAAPhC,CAAH,KCoCDmC,MA5Cf,WAAqB,IAAD,EACYC,mBAAS,GADrB,mBACXC,EADW,KACFC,EADE,KAGdC,EAAOnB,EAAMiB,GAEXG,EAAMpB,EAAMqB,OAAS,EAgB3B,OACE,kBAAC,EAAD,CAAWC,OAAK,EAACC,MAAM,SACrB,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAOhC,UAAU,OAAOC,QAlBf,WACf,IAAMgC,EAAOP,EAAU,EAGvBC,EAFcM,EAAO,EAAIJ,EAAMI,OAmB3B,kBAAC,EAAD,CAAKC,GAAI,GACP,kBAAC,EAAD,CACExC,MAAOkC,EAAKlC,MACZI,SAAU8B,EAAK9B,SACfF,KAAMgC,EAAKhC,KACXD,OAAQiC,EAAKjC,UAGjB,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAOK,UAAU,QAAQC,QAvBf,WAChB,IAAMgC,EAAOP,EAAU,EAGvBC,EAFcM,EAAOJ,EAAM,EAAII,UCjBpBE,EAFH,kBAAM,kBAAC,EAAD,OCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.031c3e1a.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const Title = styled.h1`\r\n  font-weight: bolder;\r\n  font-size: 3em;\r\n  padding-bottom: 40px;\r\n`;\r\n\r\nexport const Subtitle = styled.h1`\r\n  font-size: 2em;\r\n  padding-top: 60px;\r\n`;\r\n","import React, { FunctionComponent } from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { CardModel } from '../../model/cards';\r\n\r\nimport { Title, Subtitle } from './styles';\r\n\r\nconst Card: FunctionComponent<CardModel> = (model) => {\r\n  return (\r\n    <div>\r\n      <Title>{model.title}</Title>\r\n      <Title>{model.number}</Title>\r\n      <FontAwesomeIcon icon={model.icon} size=\"8x\"/>\r\n      <br />\r\n      &nbsp;\r\n      <br />\r\n      <Subtitle>{model.subtitle}</Subtitle>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card;\r\n","import React, { FunctionComponent } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowDown, faArrowUp, faArrowLeft, faArrowRight } from '@fortawesome/free-solid-svg-icons'\r\n\r\ntype ArrowProps = {\r\n  direction: string,\r\n  onClick?: any\r\n}\r\n\r\nconst UP = 'up';\r\nconst DOWN = 'down';\r\nconst RIGHT = 'right';\r\nconst LEFT = 'left';\r\n\r\nconst Arrow: FunctionComponent<ArrowProps> = ({ direction = 'up', onClick}) => {\r\n  const getIcon = () => {\r\n    switch (direction) {\r\n      case UP: return faArrowUp;\r\n      case DOWN: return faArrowDown;\r\n      case RIGHT: return faArrowRight;\r\n      case LEFT: return faArrowLeft;\r\n      default: return faArrowUp;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Button variant=\"link\" onClick={onClick}>\r\n      <FontAwesomeIcon icon={getIcon()} size=\"2x\" />\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default Arrow;\r\n","import { IconProp } from '@fortawesome/fontawesome-svg-core';\r\nimport { faDeaf, faDragon, faThumbsUp, faThumbsDown, faVolumeMute, faLightbulb, faHandPointUp, faHandPointRight, faQuestion, faEllipsisH } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport interface CardModel {\r\n    title?: string;\r\n    subtitle?: string;\r\n    icon: IconProp;\r\n    number?: number;\r\n};\r\n\r\nexport const Cards: CardModel[] = [\r\n    { \r\n        title: `Can't hear you`,\r\n        subtitle: '',\r\n        icon: faDeaf,\r\n    },\r\n    { \r\n        title: 'ELMO!',\r\n        subtitle: `(enough, let's move on)`,\r\n        icon: faDragon,\r\n    },\r\n    { \r\n        title: 'YES!',\r\n        subtitle: '',\r\n        icon: faThumbsUp,\r\n    },\r\n    { \r\n        title: 'NO!',\r\n        subtitle: '',\r\n        icon: faThumbsDown,\r\n    },\r\n    { \r\n        title: `You're on mute`,\r\n        subtitle: '',\r\n        icon: faVolumeMute,\r\n    },\r\n    { \r\n        title: 'Great idea!',\r\n        subtitle: '',\r\n        icon: faLightbulb,\r\n    },\r\n    { \r\n        title: 'NEXT',\r\n        subtitle: '',\r\n        icon: faHandPointRight,\r\n    },\r\n    { \r\n        title: 'I volunteer',\r\n        subtitle: '',\r\n        icon: faHandPointUp,\r\n    },\r\n    {\r\n        icon: faEllipsisH,\r\n        number: 1,\r\n    },\r\n    {\r\n        icon: faEllipsisH,\r\n        number: 2,\r\n    },\r\n    {\r\n        icon: faEllipsisH,\r\n        number: 3,\r\n    },\r\n    {\r\n        icon: faEllipsisH,\r\n        number: 4,\r\n    },\r\n    {\r\n        icon: faEllipsisH,\r\n        number: 5,\r\n    },\r\n    {\r\n        icon: faQuestion,\r\n    }\r\n];","import styled from 'styled-components';\r\nimport * as bootstrap from 'react-bootstrap';\r\n\r\nexport const Container = styled(bootstrap.Container)`\r\n  flex: 1;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100vh;\r\n\r\n  background-color: red;\r\n`;\r\n\r\nexport const Row = styled(bootstrap.Row)`\r\n  height: 100vh;\r\n`;\r\n\r\nexport const Col = styled(bootstrap.Col)`\r\n  align-self: center;\r\n  text-align: center;\r\n`;\r\n","import React, { useState } from 'react';\r\n\r\nimport Card from '../../components/Card';\r\nimport Arrow from '../../components/Arrow';\r\nimport { Cards } from '../../model/cards';\r\n\r\nimport { Container, Row, Col } from './styles';\r\n\r\nfunction MainView() {\r\n  const [current, setCurrent] = useState(0);\r\n\r\n  let card = Cards[current];\r\n  \r\n  const max = Cards.length - 1;\r\n\r\n  const moveLeft = () => {\r\n    const next = current - 1;\r\n    const value = next < 0 ? max : next;\r\n\r\n    setCurrent(value);\r\n  }\r\n\r\n  const moveRight = () => {\r\n    const next = current + 1;\r\n    const value = next > max ? 0 : next;\r\n    \r\n    setCurrent(value);\r\n  }\r\n\r\n  return (\r\n    <Container fluid class=\"w-100\">\r\n      <Row>\r\n        <Col>\r\n          <Arrow direction=\"left\" onClick={moveLeft}/>\r\n        </Col>\r\n        \r\n        <Col xs={6}>\r\n          <Card \r\n            title={card.title}\r\n            subtitle={card.subtitle}\r\n            icon={card.icon}\r\n            number={card.number} />\r\n        </Col>\r\n        \r\n        <Col>\r\n          <Arrow direction=\"right\" onClick={moveRight}/>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default MainView;\r\n","import React from 'react';\r\n\r\nimport './App.css';\r\nimport MainView from './Views/MainView';\r\n\r\nconst App = () => <MainView />;\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}